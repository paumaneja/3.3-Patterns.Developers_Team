Index: src/main/java/model/entities/Clue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.entities;\r\n\r\n\r\nimport enums.Thematic;\r\nimport enums.Type;\r\n\r\npublic class Clue extends Item {\r\n\r\n    private Thematic thematic;\r\n    private String details;\r\n\r\n    public Clue(int id, String name, double price, int idRoom, Type type, Thematic thematic, String details) {\r\n        super(id, name, price, idRoom, type);\r\n        this.thematic = thematic;\r\n        this.details = details;\r\n    }\r\n\r\n    public Thematic getThematic() {\r\n        return thematic;\r\n    }\r\n\r\n    public void setThematic(Thematic thematic) {\r\n        this.thematic = thematic;\r\n    }\r\n\r\n    public String getDetails() {\r\n        return details;\r\n    }\r\n\r\n    public void setDetails(String details) {\r\n        this.details = details;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Clue{\" +\r\n                \"thematic=\" + thematic +\r\n                \", details='\" + details + '\\'' +\r\n                '}';\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/entities/Clue.java b/src/main/java/model/entities/Clue.java
--- a/src/main/java/model/entities/Clue.java	(revision 71dc3bcb833807729ffb66fed317fe5c8ad0dc57)
+++ b/src/main/java/model/entities/Clue.java	(date 1731451017437)
@@ -9,7 +9,7 @@
     private Thematic thematic;
     private String details;
 
-    public Clue(int id, String name, double price, int idRoom, Type type, Thematic thematic, String details) {
+    public Clue(Integer id, String name, double price, int idRoom, Type type, Thematic thematic, String details) {
         super(id, name, price, idRoom, type);
         this.thematic = thematic;
         this.details = details;
Index: src/main/java/model/entities/Item.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.entities;\r\n\r\nimport enums.MaterialType;\r\nimport enums.Type;\r\n\r\npublic abstract class Item {\r\n    private int id;\r\n    private String name;\r\n    private double price;\r\n    private int idRoom;\r\n    private Type type;\r\n\r\n    public Item(int id, String name, double price, int idRoom, Type type) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.price = price;\r\n        this.idRoom = idRoom;\r\n        this.type = type;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public double getPrice() {\r\n        return price;\r\n    }\r\n\r\n    public void setPrice(float price) {\r\n        this.price = price;\r\n    }\r\n\r\n    public int getIdRoom() {\r\n        return idRoom;\r\n    }\r\n\r\n    public void setIdRoom(int idRoom) {\r\n        this.idRoom = idRoom;\r\n    }\r\n\r\n    public Type getType() {\r\n        return type;\r\n    }\r\n\r\n    public void setType(Type type) {\r\n        this.type = type;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/entities/Item.java b/src/main/java/model/entities/Item.java
--- a/src/main/java/model/entities/Item.java	(revision 71dc3bcb833807729ffb66fed317fe5c8ad0dc57)
+++ b/src/main/java/model/entities/Item.java	(date 1731451017445)
@@ -4,13 +4,13 @@
 import enums.Type;
 
 public abstract class Item {
-    private int id;
+    private Integer id;
     private String name;
     private double price;
     private int idRoom;
     private Type type;
 
-    public Item(int id, String name, double price, int idRoom, Type type) {
+    public Item(Integer id, String name, double price, int idRoom, Type type) {
         this.id = id;
         this.name = name;
         this.price = price;
@@ -18,11 +18,11 @@
         this.type = type;
     }
 
-    public int getId() {
+    public Integer getId() {
         return id;
     }
 
-    public void setId(int id) {
+    public void setId(Integer id) {
         this.id = id;
     }
 
Index: src/main/java/dao/ItemDAOImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dao;\r\n\r\nimport model.entities.Clue;\r\nimport model.entities.Decoration;\r\nimport model.entities.Item;\r\n\r\nimport java.sql.*;\r\n\r\npublic class ItemDAOImpl implements ItemDAO {\r\n\r\n    //@Override\r\n    /*public List<Clue> showAll() {\r\n        List<Room> clues = new ArrayList<>();\r\n        String query = \"SELECT * FROM clues\";\r\n        try (Connection connection = MySQLConnection.getInstance().getConnection();\r\n             Statement stmt = connection.createStatement();\r\n             ResultSet rs = stmt.executeQuery(query)) {\r\n\r\n            while (rs.next()){\r\n                clues.add(new Clue(rs.getInt(\"id_room\"), rs.getString(\"name\"),\r\n                        rs.getString(\"theme\"), rs.getInt(\"difficulty\"), rs.getDouble(\"base_price\"), rs.getInt(\"id_escape_room\")));\r\n            }\r\n        } catch (SQLException e){\r\n            System.out.println(\"Error extracting data: \" + e.getMessage());\r\n        }\r\n        return clues;\r\n    }*/\r\n\r\n    @Override\r\n    public void create(Item item) {\r\n        int idItem = createItem(item);\r\n        if (item instanceof Clue) {\r\n            createClue((Clue) item, idItem);\r\n        } else if (item instanceof Decoration) {\r\n            createDecoration((Decoration) item, idItem);\r\n        }\r\n    }\r\n\r\n\r\n    public int createItem(Item item) {\r\n        int idItem = 0;\r\n        String query = \"INSERT INTO items (name_item, price, id_room, type) VALUES (?,?,?,?)\";\r\n        try (Connection conn = MySQLConnection.getInstance().getConnection();\r\n             PreparedStatement stmt = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {\r\n\r\n            stmt.setString(1, item.getName());\r\n            stmt.setDouble(2, item.getPrice());\r\n            stmt.setInt(3, item.getIdRoom());\r\n            stmt.setString(4, item.getType().name());\r\n\r\n            stmt.executeUpdate();\r\n\r\n            try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {\r\n                if (generatedKeys.next()) {\r\n                    int generatedId = generatedKeys.getInt(1);\r\n                    idItem = generatedId;\r\n                    item.setId(generatedId);\r\n                    System.out.println(\"Item created with ID: \" + generatedId);\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Error inserting the item into DB. \" + e.getMessage());\r\n        }\r\n        return idItem;\r\n    }\r\n\r\n    public void createClue(Clue clue, int idItem) {\r\n        String query = \"INSERT INTO clues (id_item, thematic, details) VALUES (?,?,?)\";\r\n        try (Connection conn = MySQLConnection.getInstance().getConnection();\r\n             PreparedStatement stmt = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {\r\n\r\n            stmt.setInt(1, idItem);\r\n            stmt.setString(2, clue.getThematic().name());\r\n            stmt.setString(2, clue.getDetails());\r\n\r\n            stmt.executeUpdate();\r\n\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Error inserting the clue into DB. \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void createDecoration(Decoration deco, int idItem) {\r\n        String query = \"INSERT INTO decorations (id_item, material_type) VALUES (?,?)\";\r\n        try (Connection conn = MySQLConnection.getInstance().getConnection();\r\n             PreparedStatement stmt = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {\r\n\r\n            stmt.setInt(1, idItem);\r\n            stmt.setString(2, deco.getMaterial().name());\r\n\r\n            stmt.executeUpdate();\r\n\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Error inserting the decoration into DB. \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public void update(Item clue) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void delete(int id) {\r\n\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dao/ItemDAOImpl.java b/src/main/java/dao/ItemDAOImpl.java
--- a/src/main/java/dao/ItemDAOImpl.java	(revision 71dc3bcb833807729ffb66fed317fe5c8ad0dc57)
+++ b/src/main/java/dao/ItemDAOImpl.java	(date 1731452337042)
@@ -28,7 +28,7 @@
 
     @Override
     public void create(Item item) {
-        int idItem = createItem(item);
+        Integer idItem = createItem(item);
         if (item instanceof Clue) {
             createClue((Clue) item, idItem);
         } else if (item instanceof Decoration) {
@@ -37,8 +37,8 @@
     }
 
 
-    public int createItem(Item item) {
-        int idItem = 0;
+    public Integer createItem(Item item) {
+        Integer idItem = 0;
         String query = "INSERT INTO items (name_item, price, id_room, type) VALUES (?,?,?,?)";
         try (Connection conn = MySQLConnection.getInstance().getConnection();
              PreparedStatement stmt = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
@@ -52,7 +52,7 @@
 
             try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                 if (generatedKeys.next()) {
-                    int generatedId = generatedKeys.getInt(1);
+                    Integer generatedId = generatedKeys.getInt(1);
                     idItem = generatedId;
                     item.setId(generatedId);
                     System.out.println("Item created with ID: " + generatedId);
@@ -64,7 +64,7 @@
         return idItem;
     }
 
-    public void createClue(Clue clue, int idItem) {
+    public void createClue(Clue clue, Integer idItem) {
         String query = "INSERT INTO clues (id_item, thematic, details) VALUES (?,?,?)";
         try (Connection conn = MySQLConnection.getInstance().getConnection();
              PreparedStatement stmt = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
@@ -80,7 +80,7 @@
         }
     }
 
-    public void createDecoration(Decoration deco, int idItem) {
+    public void createDecoration(Decoration deco, Integer idItem) {
         String query = "INSERT INTO decorations (id_item, material_type) VALUES (?,?)";
         try (Connection conn = MySQLConnection.getInstance().getConnection();
              PreparedStatement stmt = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
Index: src/main/java/dao/MySQLConnection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dao;\r\n\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.sql.*;\r\n\r\npublic class MySQLConnection {\r\n    private static MySQLConnection instance = null;\r\n    private Connection connection;\r\n\r\n    protected ResultSet resultSet;\r\n    protected PreparedStatement preparedStatement;\r\n\r\n\r\n    private static final String URL = \"jdbc:mysql://localhost/escaperoom\";\r\n    private static final String USER = \"root\";\r\n    private String password;\r\n\r\n    private MySQLConnection() {\r\n        try {\r\n            this.password = readPassword();\r\n            connection = DriverManager.getConnection(URL, USER, password);\r\n        } catch (SQLException | IOException e) {\r\n            if (e instanceof SQLException) {\r\n                System.err.println(\"Error while connecting to the DB.\");\r\n            }\r\n            if (e instanceof IOException) {\r\n                System.err.println(\"Error. Could not read the file.\");\r\n            } else {\r\n                System.out.println(\"Couldnt connect\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public static MySQLConnection getInstance() throws SQLException {\r\n        if (instance == null || instance.getConnection().isClosed()) {\r\n            instance = new MySQLConnection();\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    public Connection getConnection() {\r\n        return connection;\r\n    }\r\n\r\n    public PreparedStatement getPreparedStatement() {\r\n        return preparedStatement;\r\n    }\r\n\r\n    public ResultSet getResultSet() {\r\n        return resultSet;\r\n    }\r\n\r\n    public void closeResultSet() {\r\n        try {\r\n            resultSet.close();\r\n        } catch (SQLException ex) {\r\n            System.err.println(\"Error. Couldn't close resultSet.\");\r\n        }\r\n    }\r\n\r\n    public void closeStatement() {\r\n        try {\r\n            preparedStatement.close();\r\n        } catch (SQLException ex) {\r\n            System.err.println(\"Error. Couldn't close statement.\");\r\n        }\r\n    }\r\n\r\n    public void closeConnection() {\r\n        try {\r\n            if (resultSet != null) {\r\n                closeResultSet();\r\n            }\r\n            if (preparedStatement != null) {\r\n                closeStatement();\r\n            }\r\n            connection.close();\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Error. Couldn't close the connection properly.\");\r\n        }\r\n    }\r\n\r\n    public static String readPassword() throws IOException {\r\n        Path fileName = Path.of(\"Escape_Room/src/Password.txt\");\r\n        String password = Files.readString(fileName);\r\n\r\n        return password;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dao/MySQLConnection.java b/src/main/java/dao/MySQLConnection.java
--- a/src/main/java/dao/MySQLConnection.java	(revision 71dc3bcb833807729ffb66fed317fe5c8ad0dc57)
+++ b/src/main/java/dao/MySQLConnection.java	(date 1731452586470)
@@ -83,7 +83,7 @@
     }
 
     public static String readPassword() throws IOException {
-        Path fileName = Path.of("Escape_Room/src/Password.txt");
+        Path fileName = Path.of("src/Password.txt");
         String password = Files.readString(fileName);
 
         return password;
Index: src/main/java/model/entities/Decoration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.entities;\r\n\r\n\r\nimport enums.MaterialType;\r\nimport enums.Type;\r\n\r\npublic class Decoration extends Item {\r\n\r\n    private MaterialType material;\r\n\r\n    public Decoration(int id, String name, double price, int idRoom, Type type, MaterialType material) {\r\n        super(id, name, price, idRoom, type);\r\n        this.material = material;\r\n    }\r\n\r\n    public MaterialType getMaterial() {\r\n        return material;\r\n    }\r\n\r\n    public void setMaterial(MaterialType material) {\r\n        this.material = material;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Decoration{\" +\r\n                \"material=\" + material +\r\n                '}';\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/entities/Decoration.java b/src/main/java/model/entities/Decoration.java
--- a/src/main/java/model/entities/Decoration.java	(revision 71dc3bcb833807729ffb66fed317fe5c8ad0dc57)
+++ b/src/main/java/model/entities/Decoration.java	(date 1731451017441)
@@ -8,7 +8,7 @@
 
     private MaterialType material;
 
-    public Decoration(int id, String name, double price, int idRoom, Type type, MaterialType material) {
+    public Decoration(Integer id, String name, double price, int idRoom, Type type, MaterialType material) {
         super(id, name, price, idRoom, type);
         this.material = material;
     }
